services:

  pangolin:
    image: fosrl/pangolin:postgresql-${PANGOLIN_VERSION:-latest}
    env_file: environment.d/pangolin.env
    environment:
      SERVER_SECRET: ${SERVER_SECRET}
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./volumes/config:/app/config
      - ${PANGOLIN_DATA_VOLUME:-pangolin-data}:/var/certificates
      - ${PANGOLIN_DATA_VOLUME:-pangolin-data}:/var/dynamic
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/"]
      interval: "3s"
      timeout: "3s"
      retries: 5
    labels:
      com.centurylinklabs.watchtower.scope: ${COMPOSE_PROJECT_NAME}
    restart: unless-stopped

  gerbil:
    image: fosrl/gerbil:${GERBIL_VERSION:-latest}
    env_file: environment.d/gerbil.env
    depends_on:
      pangolin:
        condition: service_healthy
    cap_add: [NET_ADMIN, SYS_MODULE]
    volumes:
      - ./volumes/config:/var/config
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${HTTP_PORT:-80}:80
      - ${SSL_PORT:-443}:443
      - ${SITE_TUNNEL_PORT:-51820}:51820/udp
      - ${CLIENT_TUNNEL_PORT:-21820}:21820/udp
    command:
      - --reachableAt=http://gerbil:3003
      - --generateAndSaveKeyTo=/var/config/key
      - --remoteConfig=http://pangolin:3001/api/v1/
    labels:
      com.centurylinklabs.watchtower.scope: ${COMPOSE_PROJECT_NAME}
    restart: unless-stopped

  traefik:
    image: traefik:${TRAEFIK_VERSION:-latest}
    env_file: environment.d/traefik.env
    network_mode: service:gerbil
    depends_on:
      pangolin:
        condition: service_healthy
    volumes:
      - ./volumes/config/traefik:/etc/traefik:ro
      - ${TRAEFIK_CERTS_VOLUME:-traefik-certs}:/letsencrypt
      - ${PANGOLIN_DATA_VOLUME:-pangolin-data}:/var/certificates:ro
      - ${PANGOLIN_DATA_VOLUME:-pangolin-data}:/var/dynamic:ro

      - /etc/localtime:/etc/localtime:ro
    command:
      - --configFile=/etc/traefik/traefik_config.yml
    labels:
      com.centurylinklabs.watchtower.scope: ${COMPOSE_PROJECT_NAME}
    restart: unless-stopped

  database:
    image: postgres:${POSTGRES_VERSION:-17}
    env_file: environment.d/database.env
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-fossorial}
      POSTGRES_USER: ${DATABASE_USER:-fossorial}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./volumes/database:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: pg_isready -d ${DATABASE_NAME:-fossorial} -U ${DATABASE_USER:-fossorial}
    labels:
      com.centurylinklabs.watchtower.scope: ${COMPOSE_PROJECT_NAME}
    restart: unless-stopped

  database-backups:
    image: prodrigestivill/postgres-backup-local:${POSTGRES_BACKUP_VERSION:-latest}
    env_file: environment.d/database-backups.env
    environment:
      POSTGRES_HOST: ${DATABASE_HOST:-database}
      POSTGRES_DB: ${DATABASE_NAME:-fossorial}
      POSTGRES_USER: ${DATABASE_USER:-fossorial}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_EXTRA_OPTS: '--clean --if-exists'
      BACKUP_DIR: /backups
    volumes:
      - ${DATABASE_BACKUPS_PATH:-./volumes/backups}:/backups
      - /etc/localtime:/etc/localtime:ro
    depends_on: [database]
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower:${WATCHTOWER_VERSION:-latest}
    env_file: environment.d/watchtower.env
    environment:
      WATCHTOWER_SCOPE: ${COMPOSE_PROJECT_NAME}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    labels:
      com.centurylinklabs.watchtower.scope: ${COMPOSE_PROJECT_NAME}
    restart: unless-stopped

volumes:
  pangolin-data: {}
  traefik-certs: {}
